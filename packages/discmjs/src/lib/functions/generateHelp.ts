import { DiscmClient } from '../classes/Client';
import { EmbedBuilder } from 'discord.js';
import { AutoGeneratedHelpSettings } from '../types/interfaces';
import { CommandOptionType } from '../..';

/**
 * Generates a help command for the client.
 * @param client The client generating the help command.
 */
export function generateHelp(client: DiscmClient) {
	client.commands.set('help', {
		type: 'slash',
		name: 'help',
		description: 'Help command for the bot, auto generated by discm.js.',
		plugins: [],
		delayedDeploy: false,
		data: {
			name: 'help',
			description:
				'Help command for the bot, auto generated by discm.js.',
			options: [
				{
					name: 'command',
					description: 'A specific command you want help on.',
					type: 3,
					choices: client.commands.map((_, name) => ({
						name,
						value: name
					}))
				}
			]
		},
		async run(client, interaction) {
			const embed = new EmbedBuilder()
				.setThumbnail(
					client.user?.displayAvatarURL({
						extension: 'png',
						forceStatic: true
					})!
				)
				.setFooter({
					text: 'Help command generated by Discm.JS'
				})
				.setColor(
					(client.autoGenerateHelp as AutoGeneratedHelpSettings).color
						? (client.autoGenerateHelp as AutoGeneratedHelpSettings)
								.color!
						: 'Blurple'
				);

			const name = interaction.options.getString('command');
			if (name) {
				const command = client.commands.get(name)!;

				embed.setTitle(
					`${
						name.slice(0, 1).toUpperCase() + name.slice(1)
					} Help Menu`
				);

				if (command.type === 'slash') {
					if (command.data.options) {
						embed.setDescription(
							command.description! +
								`This command is a **slash (/)** command. It has **${command.data.options.length}** options.`
						);

						for (const option of command.data.options) {
							embed.addFields({
								name: option.name,
								value: `**${
									option.required ? 'Required' : 'Optional'
								}**\n${
									option.description
								} It accepts **${CommandOptionType[
									option.type
								].toLowerCase()}** values.`
							});
						}
					} else
						embed.setDescription(
							command.description! +
								`This command is a **slash (/)** command. It does not have any options.`
						);
				} else {
					if (command.options) {
						embed.setDescription(
							command.description! +
								`This command is a **text** command. It has **${command.options.length}** options.`
						);

						for (const option of command.options) {
							embed.addFields({
								name: option.name,
								value: `${option.description} It accepts **${option.type}** values.`
							});
						}
					} else
						embed.setDescription(
							command.description! +
								`This command is a **text** command. It does not have any options.`
						);
				}
			} else {
				embed
					.setTitle(`${client.user?.username} Help Menu`)
					.setDescription(
						(client.autoGenerateHelp as AutoGeneratedHelpSettings)
							.description
							? (
									client.autoGenerateHelp as AutoGeneratedHelpSettings
							  ).description!
							: client.application?.description ||
									`Here are the commands for: ${client.user!}`
					);

				for (const [name, command] of client.commands) {
					embed.addFields({
						name,
						value: `${
							command.description
						}\nCommand \`${name}\` is a **${
							command.type === 'slash' ? 'slash (/)' : 'text'
						}** command.`,
						inline: true
					});
				}
			}

			interaction.reply({
				embeds: [embed.toJSON()],
				ephemeral: true
			});
		}
	});
}
