import {
	Awaitable,
	ChatInputCommandInteraction,
	ClientEvents,
	Message,
	RESTPostAPIApplicationCommandsJSONBody,
	APIApplicationCommandOption,
	Client,
	ColorResolvable
} from 'discord.js';
import { AnyCommandTextOption } from './aliases';
import { DiscmClient } from '../classes/Client';

/**
 * The extra options discm.js requires for clients.
 */
export interface AdditionalClientOptions {
	/**
	 * The directories to read from.
	 */
	dirs: {
		/**
		 * The directory to read commands from.
		 */
		commands: string;

		/**
		 * The directory to read events from.
		 */
		events: string;
	};

	/**
	 * Prefix to use for text commands.
	 * @default "!"
	 */
	prefix?: string;

	/**
	 * Whether to deploy the slash commands globally or to a specific guild.
	 * If false, a guild id or an array of guild ids will have to be provided to the login function.
	 * @default true
	 */
	global?: boolean;

	/**
	 * This will not automatically deploy commands when {@link Client.login} is called.
	 * Commands will NOT be deployed until {@link Client.deploy} is manually called.
	 * @default false
	 */
	delayDeploy?: boolean;

	/**
	 * This will automatically generate a help slash command.
	 * An object of settings to customize the command can be passed.
	 * If set to true, it will use a set of default settings.
	 * @default false
	 * @example
	 * // Using `true` for autoGenerateHelpCommand.
	 * const client = new DiscmClient({
	 * 	intents: ['Guilds'],
	 * 	dirs: {
	 * 		commands: `${__dirname}/commands`,
	 * 		events: `${__dirname}/events`
	 * 	},
	 * 	autoGenerateHelpCommand: true
	 * })
	 *
	 * // Using `AutoGeneratedHelpCommandSettings` for autoGenerateHelpCommand.
	 * const client = new DiscmClient({
	 * 	intents: ['Guilds'],
	 * 	dirs: {
	 * 		commands: `${__dirname}/commands`,
	 * 		events: `${__dirname}/events`
	 * 	},
	 * 	autoGenerateHelpCommand: {
	 * 		type: 'slash',
	 * 	}
	 * })
	 */
	autoGenerateHelpCommand?: boolean | AutoGeneratedHelpSettings;
}

/**
 * The command options for a discm.js command.
 */
export interface Command<T extends 'slash' | 'text'> {
	/**
	 * The name of the command.
	 * @deprecated Use file names instead.
	 */
	name?: string;

	/**
	 * The description of the command.
	 */
	description: string;

	/**
	 * The type of the command.
	 */
	type: T;

	/**
	 * The options for the command.
	 */
	options?: T extends 'slash'
		? APIApplicationCommandOption[]
		: AnyCommandTextOption[];

	/**
	 * The plugins the command uses.
	 */
	plugins?: Plugin<T>[];

	/**
	 * Whether to delay the deployment of that specific command
	 * The command will not deploy until manually called by the client.
	 * @default false
	 */
	delayDeploy?: boolean;

	/**
	 * Code to execute once the command is called.
	 */
	run: T extends 'slash'
		? (args: {
				client: DiscmClient;
				interaction: ChatInputCommandInteraction;
		  }) => Awaitable<void>
		: (args: {
				client: DiscmClient;
				message: Message;
				options: CommandTextOptionResults;
		  }) => Awaitable<void>;
}

export interface CommandTextOptionChoice {
	/**
	 * The name of this option.
	 */
	name: string;

	/**
	 * The value to provide if this option is selected.
	 */
	value: string;
}

/**
 * An option for a text command.
 */
export interface CommandTextOption<T extends 'string' | 'number' | 'boolean'> {
	/**
	 * The name of the option.
	 */
	name: string;

	/**
	 * The description of the option.
	 */
	description: string;

	/**
	 * The type the user should use.
	 */
	type: T;

	/**
	 * If this is a string or number option, the only valid options the user can type.
	 * If the user types something that is not in this list, than it will return as not valid.
	 */
	choices?: T extends 'string' ? CommandTextOptionChoice[] : never;
}

/**
 * The results of the evaluation of the given option.
 * Mimics {@link ChatInputCommandInteraction.options interaction.options}
 */
export interface CommandTextOptionResults {
	/**
	 * Gets a string option.
	 * @param name The name of the option.
	 * @returns "" if the option is invalid.
	 */
	getString(name: string): string;

	/**
	 * Gets a number option
	 * @param name The name of the option.
	 * @returns NaN if the option is invalid.
	 */
	getNumber(name: string): number;

	/**
	 * Gets a boolean option.
	 * @param name The name of the option.
	 * @returns "" if the option is invalid.
	 */
	getBoolean(name: string): boolean | '';
}

/**
 * The options for a discm.js event.
 */
export interface DiscordEvent<T extends keyof ClientEvents> {
	/**
	 * The name of the client event.
	 */
	name: T;

	/**
	 * Whether to use Client.once or Client.on.
	 */
	once?: boolean;

	/**
	 * The code to execute when the event is called.
	 * @param client The client provided to the callback function.
	 * @param args The arguments of the client event.
	 */
	run: (client: DiscmClient, ...args: ClientEvents[T]) => Awaitable<void>;
}

/**
 * A parsed text command.
 */
export interface ParsedTextCommand {
	/**
	 * Specifies that this parsed command is a text command.
	 */
	type: 'text';

	/**
	 * The name of the command.
	 */
	name: string;

	/**
	 * The description of the command.
	 */
	description: string;

	/**
	 * A list of plugins the command uses.
	 */
	plugins: Plugin<'text'>[];

	/**
	 * A list of options the command uses.
	 */
	options: AnyCommandTextOption[];

	/**
	 * The callback of this command.
	 * @param client The client of this command.
	 * @param message The message that called the command.
	 * @param options The options the command uses.
	 */
	run: (
		client: DiscmClient,
		message: Message,
		options: CommandTextOptionResults
	) => Awaitable<void>;
}

/**
 * A parsed slash (/) command.
 */
export interface ParsedSlashCommand {
	/**
	 * Specifies that this parsed command is a slash (/) command.
	 */
	type: 'slash';

	/**
	 * The name of the command.
	 */
	name: string;

	/**
	 * The description of the command.
	 */
	description: string;

	/**
	 * The data of the command deployed to discord.
	 */
	data: RESTPostAPIApplicationCommandsJSONBody;

	/**
	 * A list of plugins this command uses.
	 */
	plugins: Plugin<'slash'>[];

	/**
	 * Whether to delay the deployment of this command.
	 */
	delayedDeploy: boolean;

	/**
	 * The callback of this command.
	 * @param client The client of this command.
	 * @param interaction The interaction that called this command.
	 */
	run: (
		client: DiscmClient,
		interaction: ChatInputCommandInteraction
	) => Awaitable<void>;
}

/**
 * A parsed overload command (slash and text).
 */
export interface ParsedOverloadCommand {
	/**
	 * Specifies that this command has data for both a slash and text command.
	 */
	type: 'overload';

	/**
	 * The name of the command.
	 */
	name: string;

	/**
	 * The description of the command.
	 */
	description: string;

	/**
	 * The options the text command uses. Slash command options are only in data.
	 */
	options: AnyCommandTextOption[];

	/**
	 * Overload commands do not permit plugins yet.
	 */
	plugins: [];

	/**
	 * The data of the command deployed to discord.
	 */
	data: RESTPostAPIApplicationCommandsJSONBody;

	/**
	 * Whether to delay the deployment of this command.
	 */
	delayedDeploy: boolean;

	/**
	 * The callback for the slash version of this command.
	 * @param client The client of this command.
	 * @param interaction The interaction that called this command.
	 */
	slashRun: (
		client: DiscmClient,
		interaction: ChatInputCommandInteraction
	) => Awaitable<void>;

	/**
	 * The callback for the text version of command.
	 * @param client The client of this command.
	 * @param message The message that called the command.
	 * @param options The options the command uses.
	 */
	textRun: (
		client: DiscmClient,
		message: Message,
		options: CommandTextOptionResults
	) => Awaitable<void>;
}

/**
 * A plugin that a command can use.
 */
export interface Plugin<T extends 'slash' | 'text'> {
	/**
	 * Whether this command is for slash (/) commands or text commands.
	 */
	type: T;

	/**
	 * The name of the plugin
	 */
	name: string;

	/**
	 * The callback for this plugin.
	 */
	run: T extends 'text'
		? (args: {
				command: Omit<ParsedTextCommand, 'run'>;
				client: DiscmClient;
				message: Message;
				options: CommandTextOptionResults;
		  }) => 'stop' | 'continue'
		: (args: {
				command: Omit<ParsedSlashCommand, 'run'>;
				client: DiscmClient;
				interaction: ChatInputCommandInteraction;
		  }) => 'stop' | 'continue';
}

/**
 * The settings for the help command.
 */
export interface AutoGeneratedHelpSettings {
	/**
	 * The description for the embed.
	 * @default "Here are the commands for (your bots name):"
	 */
	description?: string;

	/**
	 * Which color for the embed to use.
	 * @default "Blurple"
	 */
	color?: ColorResolvable;

	/**
	 * The type of command the help command should be.
	 * @default "overload"
	 */
	type?: 'text' | 'slash' | 'overload';

	/**
	 * Whether to delay the deployment of the help command.
	 * @default false
	 */
	delayDeploy?: boolean;
}
